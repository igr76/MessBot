const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list=[]
        this.user={}
        this.count=0
    }

    async srart(msg) {
        this.mode="main";
        const text = this.loadMessage("main");
        await  this.sendImage("main")
        await this.sendText(text)
        // add menu
        await this.showMainMenu({
            "start":"–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile":"–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è",
            "opener":"—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message":"–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date":"–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt":"–û–±—â–µ–Ω–∏–µ —Å –ò–ò",
            "html":"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è html"
        })
    }
    async html(msg) {
        await this.sendHTML('<h3 style="color: #1a73e8">Hello</h3>', msg);
        const html  = this.loadHtml("main")
        await this.sendHTML(html, {theme:"dark"});
    }

    async gpt(msg) {
        this.mode="gpt";
        const text = this.loadMessage("gpt");
        await  this.sendImage("gpt")
        await  this.sendText(text)
    }
    async gptDialog(msg) {
        await  this.sendText(" –ò–ò")
        const text = msg.text;
        const  myMessage = await this.sendText(" –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∞—Ç—É GPT. –æ–∂–∏–¥–∞–π—Ç–µ..")
       const  answer = await chatgpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å",text)
           //await  this.sendText(answer)
        await this.editText(myMessage,answer)
    }
    async date(msg) {
        this.mode="date";
        const text = this.loadMessage("date");
        await  this.sendImage("date")
        await  this.sendTextButtons(text,{
            "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya": "–ó–µ–Ω–¥–µ—è",
            "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
        })
    }
    async dateButton(callbakQuery) {
        const query = callbakQuery.data;
        await this.sendImage(query)
        await  this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –ø—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")
        const promt=this.loadPrompt(query)
        chatgpt.setPrompt(promt)

    }
    async dateDialog(msg) {
        const text = msg.text;
        const  myMessage = await this.sendText("–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        const  answer = await chatgpt.addMessage(text)
        await  this.editText(myMessage,answer)
    }
    async message(msg) {
        this.mode="message";
        const text = this.loadMessage("message");
        await  this.sendImage("message")
        await  this.sendTextButtons(text,{
            "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
        })
        this.list=[]
    }
    async messageButton(callbakQuery) {
        const query = callbakQuery.data;
        const promt = this.loadPrompt(query)
        const userChatHistory = this.list.join("\n\n")
        const  myMessage = await this.sendText("—á–∞—Ç GPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º")
        const  answer = await chatgpt.sendQuestion(promt,userChatHistory)
        await  this.editText(myMessage,answer)

    }
    async messageDialog(msg) {
        const text = msg.text;
        this.list.push(text)

    }
    async profile(msg) {
        this.mode="profile";
        const text = this.loadMessage("profile");
        await  this.sendImage("profile")
        await  this.sendText(text)
        this.user={}
        this.count=0;
        await  this.sendText("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")

    }
    async profileDialog(msg) {
        const text = msg.text;
        this.count ++;

        if (this.count ===1){
            this.user["age"]=text;
            await  this.sendText("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        }
        if (this.count ===2){
            this.user["accupation"]=text;
            await  this.sendText("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
        }
        if (this.count ===3){
            this.user["hobby"]=text;
            await  this.sendText("–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
        }
        if (this.count ===4){
            this.user["annays"]=text;
            await  this.sendText("–ß—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?")
        }
        if (this.count ===5){
            this.user["goals"]=text;
            const prom =this.loadPrompt("profile")
            const  info = userInfoToString(this.user);
            const  myMessage = await this.sendText("—á–∞—Ç GPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
            const  answer = await chatgpt.sendQuestion(prompt,info);
            await  this.editText(myMessage,answer)
        }


    }
    async opener(msg) {
        this.mode="opener";
        const text = this.loadMessage("opener");
        await  this.sendImage("opener")
        await  this.sendText(text)
        this.user={}
        this.count=0;
        await  this.sendText("–ò–º—è –¥–µ–≤—É—à–∫–∏?")

    }
    async openerDialog(msg) {
        const text = msg.text;
        this.count++;
        if (this.count ===1){
            this.user["name"]=text;
            await  this.sendText("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")
        }
        if (this.count ===2){
            this.user["age"]=text;
            await  this.sendText("–û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å 1-10?")
        }
        if (this.count ===3){
            this.user["handsome"]=text;
            await  this.sendText("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
        }
        if (this.count ===4){
            this.user["occupation"]=text;
            await  this.sendText("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        }
        if (this.count ===5){
            this.user["goals"]=text;
            const prom =this.loadPrompt("opener")
            const  info = userInfoToString(this.user);
            const  myMessage = await this.sendText("—á–∞—Ç GPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—à –æ–±—Ä–∞–∑")
            const  answer = await chatgpt.sendQuestion(prompt,info);
            await  this.editText(myMessage,answer)
        }
    }
   async hello(msg){
        if (this.mode === "gpt") {
            await this.gptDialog(msg);
        }else if (this.mode === "date") {
           await this.dateDialog(msg);
        }else if (this.mode === "message") {
            await this.messageDialog(msg);
        }else if (this.mode === "profile") {
            await this.profileDialog(msg);
        }else if (this.mode === "opener") {
            await this.openerDialog(msg);
        }else {
           const text = msg.text;
           await this.sendText("<b>Hello !</b>")
           await this.sendText("Hello World!" + text)
           await this.sendImage("avatar_main")
           await this.sendTextButtons("–ö–∞–∫–∞—è —É –≤–∞—Å —Ç–µ–º–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º", {
               "theme_light": "–°–≤–µ—Ç–ª–∞—è",
               "theme_dark": "–¢–µ–º–Ω–∞—è",

           })
       }
   }

   async helloButton(callbakQuery){
        const query = callbakQuery.data;
        if (query === "theme_light")
            await this.sendText("–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
       else  if (query === "theme_dark")
            await this.sendText("–¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
   }

}
const  chatgpt = new ChatGptService("60Et7Jza9bA4ePGiBCDOJFkblB3TLxR3EqTzYJuFUFITcRHp");
const bot = new MyTelegramBot("7399956767:AAHVAfzBjCCXwXK5e-6uT_l5_v4JoRpSWSE");
bot.onCommand(/\/start/,bot.srart)
bot.onCommand(/\/html/,bot.html)
bot.onCommand(/\/gpt/,bot.gpt)
bot.onCommand(/\/date/,bot.date)
bot.onCommand(/\/message/,bot.message)
bot.onCommand(/\/profile/,bot.profile)
bot.onCommand(/\/opener/,bot.opener)
bot.onTextMessage(bot.hello)
bot.onButtonCallback(/^date_.*/,bot.dateButton)
bot.onButtonCallback(/^message_.*/,bot.messageButton )
bot.onButtonCallback(/^.*/,bot.helloButton)